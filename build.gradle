plugins {
	id "java"
	id "c"
	id "de.undercouch.download" version "1.2"
}

import de.undercouch.gradle.tasks.download.Download

sourceCompatibility = 1.6 
version = '0.1'

task wrapper(type: Wrapper) {
	gradleVersion = '2.3'
}

repositories {
	maven {
		url "http://repo.bukkit.org/content/groups/public/"
	}
	
	flatDir {
		dirs 'lib'
	}
}

dependencies {
	compile 'org.bukkit:bukkit:1.7.9-R0.2'
	compile ':jnlua-0.9.6'
}

if(gradle.startParameter.taskNames.contains("clean")) {
	delete "lib/lua-5.1.5"
} 


if(!(new File(gradle.gradleUserHomeDir, "caches/lua-5.1.5.tar.gz")).exists()) {
	download {
		src "http://www.lua.org/ftp/lua-5.1.5.tar.gz"
		dest new File(gradle.gradleUserHomeDir, "caches/lua-5.1.5.tar.gz")
	}
}

if(!file("lib/lua-5.1.5").exists()) {
	copy {
		from tarTree(new File(gradle.gradleUserHomeDir, "caches/lua-5.1.5.tar.gz"))
		into "lib"
	}
}



model {
	components {
		lua51(NativeLibrarySpec) {
			sources {
				c {
					source {
						srcDir "lib/lua-5.1.5/src"
						include("lapi.c", "lcode.c", "ldebug.c", "ldo.c", "ldump.c", "lfunc.c", "lgc.c", "llex.c",
							"lmem.c", "lobject.c", "lopcodes.c", "lparser.c", "lstate.c", "lstring.c",
							"ltable.c", "ltm.c", "lundump.c", "lvm.c", "lzio.c",
							"lauxlib.c", "lbaselib.c", "ldblib.c", "liolib.c", "lmathlib.c", "loslib.c",
							"ltablib.c", "lstrlib.c", "loadlib.c", "linit.c")
					}
					exportedHeaders {
						srcDir "lib/lua-5.1.5/src"
						include "**/*.h"
					}
					binaries.withType(StaticLibraryBinarySpec) { bin ->
						binaries.remove(bin)
					}
					binaries.withType(SharedLibraryBinarySpec) { bin ->
						bin.sharedLibraryFile file("build/staging/lua5.1.dll")
						bin.sharedLibraryLinkFile bin.sharedLibraryFile
					}
				}
			}
		}

		lua(NativeExecutableSpec) {
			sources {
				c {
					source {
						srcDir "lib/lua-5.1.5/src"
						include "lua.c"
					}
					lib library: "lua51"
					binaries.all { bin ->
						bin.executableFile file("build/staging/lua.exe")
					}
				}
			}
		}

		mokapot(NativeLibrarySpec) {
			sources {
				c {
					source {
						srcDir "src/main/c"
						include "**/*.c"
					}
					//exportedHeaders {
					//	srcDir "lua-5.1/src"
					//	include "**/*.h"
					//}
					lib library: 'lua51'
					binaries.withType(StaticLibraryBinarySpec) { bin ->
						binaries.remove(bin)
					}
					binaries.withType(SharedLibraryBinarySpec) { bin ->
						bin.sharedLibraryFile file("build/staging/Plugins/MokaPot/mokapot.dll")
						bin.sharedLibraryLinkFile bin.sharedLibraryFile
					}
				}
			}
		}
	}
}

jar {
	archiveName "mokapot.jar"
	destinationDir file("build/staging/Plugins/MokaPot")
}

task luaScripts(type: Copy) {
	description "Copies the lua scripts to the staging directory."
	group "build"
	from "src/main/lua"
	into "build/staging/Plugins/MokaPot"
}

assemble.dependsOn luaScripts

task copyLibs(type: Copy) {
	group "build"
	from "lib", "natives"
	exclude "**/lua"
	into "build/staging/Plugins/MokaPot"
}

assemble.dependsOn copyLibs

task runTest(type: Exec) {
	dependsOn assemble
	workingDir "build/staging"
	commandLine "lua", "../../src/test/lua/test.lua"
}

check.dependsOn -= test

test {
	dependsOn.clear()
	dependsOn runTest
	deleteAllActions()
	description 'Runs the tests.'
}

check.dependsOn test
check.dependsOn -= testClasses
